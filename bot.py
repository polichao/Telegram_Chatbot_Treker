import asyncio
import logging
import os
import io
from aiogram import Bot, Dispatcher, types, filters
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, BufferedInputFile, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram import F
from dotenv import load_dotenv
from datetime import datetime
import sqlite3
import matplotlib.pyplot as plt
import re
import pytz

conn = sqlite3.connect("database.db")  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ (—Ñ–∞–π–ª database.db)
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã

cursor.execute("""
CREATE TABLE IF NOT EXISTS time_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    date TEXT,
    start_time TEXT,
    end_time TEXT,
    duration INTEGER  -- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS time_tracking (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    start_time TEXT
)
""")

conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω
if not TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables!")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


CATEGORIES = ["üò¥ –°–æ–Ω", "üõÅ –£—Ö–æ–¥ –∑–∞ —Å–æ–±–æ–π", "üíº –†–∞–±–æ—Ç–∞", "üèãÔ∏è‚Äç –°–ø–æ—Ä—Ç –∏ –ó–¥–æ—Ä–æ–≤—å–µ", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –¥—Ä—É–∑—å—è",
              "üöó –õ–æ–≥–∏—Å—Ç–∏–∫–∞", "üè° –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞", "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "üìö –õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", "üêå –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è"]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
DAYS_TRANSLATION = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}

CATEGORY_MAPPING = {
    "selfcare": "üõÅ –£—Ö–æ–¥ –∑–∞ —Å–æ–±–æ–π",
    "work": "üíº –†–∞–±–æ—Ç–∞",
    "sport": "üèãÔ∏è‚Äç –°–ø–æ—Ä—Ç –∏ –ó–¥–æ—Ä–æ–≤—å–µ",
    "family": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –¥—Ä—É–∑—å—è",
    "sleep": "üò¥ –°–æ–Ω",
    "home": "üè° –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞",
    "learning": "üìö –õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
    "fun": "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "lazy": "üêå –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è",
    "logistics": "üöó –õ–æ–≥–∏—Å—Ç–∏–∫–∞"
}


# –ü–µ—Ä–µ–≤–æ–¥–∏—Ç datetime Python –≤ —Å—Ç—Ä–æ–∫—É UTC ISO 8601
def to_utc_iso(dt):
    dt_utc = dt.astimezone(pytz.utc)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC
    return dt_utc.isoformat()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç


# –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É UTC ISO 8601 –≤ datetime UTC
def from_utc_iso(utc_str):
    dt_utc = datetime.fromisoformat(utc_str).replace(tzinfo=pytz.utc)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC
    return dt_utc


# –ü–µ—Ä–µ–≤–æ–¥–∏—Ç datetime UTC –≤ datetime —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
def from_utc_to_tz(dt):
    local_tz = os.getenv("TZ", "Asia/Dubai")  # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
    return dt.astimezone(pytz.timezone(local_tz))  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å


# –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC
def local_time_to_utc(dt):
    local_tz = os.getenv("TZ", "Asia/Dubai")  # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    local_zone = pytz.timezone(local_tz)
    dt = local_zone.localize(dt)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC
    utc_dt = dt.astimezone(pytz.utc)
    return utc_dt


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏.
def remove_emojis(text):
    return re.sub(r'[^\w\s,]', '', text)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –°–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã < 1%
def autopct_func(pct, allvalues):
    if pct < 1:
        return ''
    else:
        return f'{pct:.0f}%'  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu(has_active_tracking: bool):
    keyboard = []
    if has_active_tracking:
        keyboard.append([
            KeyboardButton(text="‚è∫ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥"),KeyboardButton(text="‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥")
        ])
    else:
        keyboard.append([
            KeyboardButton(text="‚è∫ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥")
        ])
    keyboard.append([
        KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥"), KeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥")
    ])
    keyboard.append([KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∫–∏–Ω–≥–∞
def check_active_tracking(user_id):
    cursor.execute("SELECT COUNT(*) FROM time_tracking WHERE user_id = ?", (user_id,))
    count = cursor.fetchone()[0]
    return count > 0


# –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_category_menu(categories):
    keyboard = []
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for i in range(0, len(categories), 2):
        row = categories[i:i + 2]  # –ë–µ—Ä—ë–º 2 —ç–ª–µ–º–µ–Ω—Ç–∞
        keyboard.append([KeyboardButton(text=cat) for cat in row])  # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    keyboard.append([KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


# –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats_menu():
    keyboard = [[KeyboardButton(text="üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")],
                [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    has_active_tracking = check_active_tracking(user_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(has_active_tracking))


def start_tracking(user_id, category):
    now = to_utc_iso(datetime.now())  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
    cursor.execute("INSERT INTO time_tracking (user_id, category, start_time) VALUES (?, ?, ?)",
                   (user_id, category, now))
    conn.commit()


def stop_tracking(user_id):
    cursor.execute("SELECT category, start_time FROM time_tracking WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                   (user_id,))
    row = cursor.fetchone()  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å

    if row:
        category, start_time = row
        start = start_time
        start_time = from_utc_iso(start_time)
        now = datetime.now().astimezone(pytz.utc)
        end = to_utc_iso(now)
        duration = now - start_time
        minutes = round(duration.total_seconds() / 60)

        # **–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**
        date = datetime.now().strftime("%Y-%m-%d")  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        cursor.execute(
            "INSERT INTO time_logs (user_id, category, date, start_time, end_time, duration) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, category, date, start, end, minutes))
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ `time_tracking`, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—á–∏—Ç–∞–ª–∞—Å—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π
        cursor.execute("DELETE FROM time_tracking WHERE user_id = ?", (user_id,))
        conn.commit()

        return category, minutes
    return None, None


# —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def get_daily_stats(user_id):
    date = datetime.now().strftime("%Y-%m-%d")
    local_tz = pytz.timezone(os.getenv("TZ", "Asia/Dubai"))
    midnight_local = datetime.now(local_tz).replace(hour=0, minute=0, second=0, microsecond=0)
    midnight_utc = midnight_local.astimezone(pytz.utc)
    now_utc = datetime.now(pytz.utc)
    total_for_now = int((now_utc - midnight_utc).total_seconds()//60)
    cursor.execute("""
        SELECT category, SUM(duration) FROM time_logs 
        WHERE user_id = ? AND date = ? 
        GROUP BY category
    """, (user_id, date))

    rows = cursor.fetchall()
    cursor.execute("""
            SELECT category, start_time, end_time, duration FROM time_logs 
            WHERE user_id = ? AND date = ? ORDER BY end_time LIMIT 1
        """, (user_id, date))

    category_sleep, start_time_sleep, end_time_sleep, duration_sleep = cursor.fetchone()
    sleep_before_midnight = 0

    start_time_sleep = from_utc_iso(start_time_sleep)
    end_time_sleep = from_utc_iso(end_time_sleep)

    if category_sleep == "üò¥ –°–æ–Ω":
        if start_time_sleep < midnight_utc < end_time_sleep:
            sleep_before_midnight = (midnight_utc-start_time_sleep).total_seconds() / 60  # –í—Ä–µ–º—è —Å–Ω–∞ –ø–æ—Å–ª–µ 00:00
            sleep_before_midnight = max(0, round(sleep_before_midnight))

    total_tracked = sum(duration for _, duration in rows)

    # –í—ã—á–∏—Å–ª—è–µ–º "–±–µ–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞" –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
    untracked_minutes = total_for_now - total_tracked + sleep_before_midnight

    # –î–æ–±–∞–≤–ª—è–µ–º "–ë–µ–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞"
    rows.append(("üï∞ –ë–µ–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞", untracked_minutes))
    return rows


# —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def get_weekly_stats(user_id):
    cursor.execute("""
        SELECT date, category, SUM(duration) FROM time_logs 
        WHERE user_id = ? AND date >= date('now', '-6 days')
        GROUP BY date, category
        ORDER BY date
    """, (user_id,))

    rows = cursor.fetchall()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    stats_by_day = {}
    for date, category, duration in rows:
        weekday = datetime.strptime(date, "%Y-%m-%d").strftime("%A")
        weekday_ru = DAYS_TRANSLATION[weekday]  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        if weekday_ru not in stats_by_day:
            stats_by_day[weekday_ru] = {}
        stats_by_day[weekday_ru][category] = duration

    # –î–æ–±–∞–≤–ª—è–µ–º "–ë–µ–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞" –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    for weekday in stats_by_day.keys():
        total_tracked = sum(stats_by_day[weekday].values())
        today = DAYS_TRANSLATION[datetime.now().strftime("%A")]

        if weekday != today:
            untracked_minutes = max(1440 - total_tracked, 0)
        else:
            now = from_utc_to_tz(datetime.now().astimezone(pytz.utc))
            untracked_minutes = now.hour * 60 + now.minute
            untracked_minutes = max(untracked_minutes-total_tracked, 0)
        stats_by_day[weekday]["üï∞ –ë–µ–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞"] = untracked_minutes

    return stats_by_day


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ‚è∫ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥
@dp.message(lambda message: message.text == "‚è∫ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥")
async def start_tracking_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_menu(CATEGORIES))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨Ö –ù–∞–∑–∞–¥
@dp.message(lambda message: message.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    user_id = message.from_user.id
    has_active_tracking = check_active_tracking(user_id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(has_active_tracking))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥
@dp.message(lambda message: message.text == "‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥")
async def stop_tracking_handler(message: types.Message):
    user_id = message.from_user.id
    category, minutes = stop_tracking(user_id)
    if category:
        await message.answer(f"‚è≥ –¢—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª {minutes} –º–∏–Ω –Ω–∞ {category}.", parse_mode="Markdown")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞.")
    has_active_tracking = check_active_tracking(user_id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(has_active_tracking))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", reply_markup=get_stats_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(lambda message: message.text in CATEGORIES)
async def track_time(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    category = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    old_category, minutes = stop_tracking(user_id)

    if old_category:
        await message.answer(f"‚è≥ –¢—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª {minutes} –º–∏–Ω –Ω–∞ {old_category}.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    start_tracking(user_id, category)
    await message.answer(f"‚úÖ –ù–∞—á–∞—Ç —Ç—Ä–µ–∫–∏–Ω–≥: {category}")
    has_active_tracking = check_active_tracking(user_id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(has_active_tracking))


# –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –≤ –ø—Ä–æ—à–ª–æ–º
@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥")
async def add_past_tracking(message: types.Message):
    user_id = message.from_user.id
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõÅ –£—Ö–æ–¥ –∑–∞ —Å–æ–±–æ–π", callback_data=f"track_selfcare_{user_id}"),
         InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞", callback_data=f"track_work_{user_id}")],
        [InlineKeyboardButton(text="üèãÔ∏è‚Äç –°–ø–æ—Ä—Ç –∏ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data=f"track_sport_{user_id}"),
         InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –¥—Ä—É–∑—å—è", callback_data=f"track_family_{user_id}")],
        [InlineKeyboardButton(text="üò¥ –°–æ–Ω", callback_data=f"track_sleep_{user_id}"),
         InlineKeyboardButton(text="üè° –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞", callback_data=f"track_home_{user_id}")],
        [InlineKeyboardButton(text="üìö –õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", callback_data=f"track_learning_{user_id}"),
         InlineKeyboardButton(text="üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data=f"track_fun_{user_id}")],
        [InlineKeyboardButton(text="üêå –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è", callback_data=f"track_lazy_{user_id}"),
         InlineKeyboardButton(text="üöó –õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data=f"track_logistics_{user_id}")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=keyboard)


# –ö–æ–ª–±—ç–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ç—Ä–µ–∫–∞
@dp.callback_query(F.data.startswith("track_"))
async def add_past_tracking_by_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    try:
        category = CATEGORY_MAPPING.get(category)
        user_id = callback.data.split("_")[2]
        await callback.message.answer("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM HH:MM:")
        await state.update_data(category=category, user_id=user_id)
        await state.set_state("waiting_for_new_tracking_start_time")
    except ValueError:
        await callback.message.answer("–û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤ –ø—Ä–æ—â—à–ª–æ–º
@dp.message(StateFilter("waiting_for_new_tracking_start_time"))
async def process_new_tracking_start_time(message: types.Message, state: FSMContext):
    try:
        date, hours = message.text.split()
        hour, minute = map(int, hours.split(":"))
        day, month = map(int, date.split("."))
        now_utc = datetime.now().astimezone(pytz.utc)
        date = datetime(now_utc.year, month, day, hour, minute)
        date_utc = local_time_to_utc(date)
        if date_utc > now_utc:
            await message.answer("–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        else:
            await message.answer("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM HH:MM:")
            await state.update_data(start_time=date_utc)
            await state.set_state("waiting_for_new_tracking_end_time")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–ø—Ä–∏–º–µ—Ä: 7.02 14:30).")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤ –ø—Ä–æ—à–ª–æ–º
@dp.message(StateFilter("waiting_for_new_tracking_end_time"))
async def process_new_tracking_end_time(message: types.Message, state: FSMContext):
    try:
        date, hours = message.text.split()
        hour, minute = map(int, hours.split(":"))
        day, month = map(int, date.split("."))
        data = await state.get_data()
        category = data["category"]
        user_id = data["user_id"]
        start_time = data["start_time"]
        now = datetime.now().astimezone(pytz.utc)
        end_time = local_time_to_utc(datetime(now.year, month, day, hour, minute))
        if end_time > now or start_time > end_time:
            await message.answer(
                "–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∏ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        else:
            start_time_str = from_utc_to_tz(start_time).strftime("%d.%m.%Y %H:%M")
            end_time_str = from_utc_to_tz(end_time).strftime("%d.%m.%Y %H:%M")
            start_time_iso = start_time.isoformat()
            end_time_iso = end_time.isoformat()
            date = end_time.strftime("%Y-%m-%d")
            duration = round((end_time - start_time).total_seconds() / 60)
            cursor.execute(
                "INSERT INTO time_logs (user_id, category, date, start_time, end_time, duration) VALUES (?, ?, ?, ?, ?, ?)",
                (user_id, category, date, start_time_iso, end_time_iso, duration),
            )
            conn.commit()
            await message.answer(
                f"–ù–æ–≤—ã–π —Ç—Ä–µ–∫–∫–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ\n"
                f"üìå –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time_str}\n"
                f"üìå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time_str}",
                parse_mode="Markdown"
            )
            await state.clear()
            has_active_tracking = check_active_tracking(user_id)
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(has_active_tracking))
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–ø—Ä–∏–º–µ—Ä: 7.02 14:30).")


# –ú–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ / –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@dp.message(lambda message: message.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥")
async def edit_last_tracking(message: types.Message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        "SELECT id, category, start_time, end_time, date FROM time_logs WHERE user_id = ? ORDER BY start_time DESC LIMIT 1",
        (user_id,))
    last_tracking = cursor.fetchone()

    if not last_tracking:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    tracking_id, category, start_time, end_time, date = last_tracking
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ", callback_data=f"edit_start_{tracking_id}_{date}_{end_time}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ", callback_data=f"edit_end_{tracking_id}_{date}_{start_time}")]
    ])
    start_time_text = from_utc_to_tz(from_utc_iso(start_time)).strftime("%d.%m.%Y %H:%M")
    end_time_text = from_utc_to_tz(from_utc_iso(end_time)).strftime("%d.%m.%Y %H:%M")
    await message.answer(
        f"–¢–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫–∏–Ω–≥:\n"
        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"üïí –ù–∞—á–∞–ª–æ: {start_time_text}\n"
        f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time_text}\n"
        f"–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=keyboard
    )


# –ö–æ–ª–±—ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
@dp.callback_query(F.data.startswith("edit_start_"))
async def edit_start_time(callback: CallbackQuery, state: FSMContext):
    tracking_id = callback.data.split("_")[2]
    date = callback.data.split("_")[3]
    end_time = callback.data.split("_")[4]
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
    await state.update_data(tracking_id=tracking_id, date=date, end_time=end_time)
    await state.set_state("waiting_for_new_start_time")


@dp.callback_query(F.data.startswith("edit_end_"))
async def edit_end_time(callback: CallbackQuery, state: FSMContext):
    tracking_id = callback.data.split("_")[2]
    date = callback.data.split("_")[3]
    start_time = callback.data.split("_")[4]
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
    await state.update_data(tracking_id=tracking_id, date=date, start_time=start_time)
    await state.set_state("waiting_for_new_end_time")


# –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
@dp.message(StateFilter("waiting_for_new_start_time"))
async def process_new_start_time(message: types.Message, state: FSMContext):
    try:
        new_hour, new_minute = map(int, message.text.split(":"))
        data = await state.get_data()
        tracking_id = data["tracking_id"]
        date = data["date"]
        end_time = from_utc_iso(data["end_time"])
        new_start_time = datetime.strptime(date, "%Y-%m-%d").replace(hour=new_hour, minute=new_minute)
        new_start_time = local_time_to_utc(new_start_time)
        if end_time < new_start_time:
            await message.answer("–û—à–∏–±–∫–∞: –í—Ä–µ–º—è —Ñ–∏–Ω–∏—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å—Ç–∞—Ä—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            new_time_iso = new_start_time.isoformat()
            duration = end_time - new_start_time
            minutes = round(duration.total_seconds() / 60)
            cursor.execute("UPDATE time_logs SET start_time = ?, duration = ? WHERE id = ?",
                           (new_time_iso, minutes, tracking_id))
            conn.commit()

            new_time_str = from_utc_to_tz(new_start_time).strftime("%d.%m.%Y %H:%M")
            await message.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time_str}.")
            await state.clear()
            user_id = message.from_user.id
            has_active_tracking = check_active_tracking(user_id)
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(has_active_tracking))
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–ø—Ä–∏–º–µ—Ä: 14:30).")


@dp.message(StateFilter("waiting_for_new_end_time"))
async def process_new_end_time(message: types.Message, state: FSMContext):
    try:
        new_hour, new_minute = map(int, message.text.split(":"))
        data = await state.get_data()
        tracking_id = data["tracking_id"]
        date = data["date"]
        start_time = from_utc_iso(data["start_time"])
        new_end_time = datetime.strptime(date, "%Y-%m-%d").replace(hour=new_hour, minute=new_minute)
        new_end_time = local_time_to_utc(new_end_time)
        if new_end_time < start_time:
            await message.answer("–û—à–∏–±–∫–∞: –í—Ä–µ–º—è —Ñ–∏–Ω–∏—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å—Ç–∞—Ä—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            new_time_iso = new_end_time.isoformat()
            duration = new_end_time - start_time
            minutes = round(duration.total_seconds() / 60)
            cursor.execute("UPDATE time_logs SET end_time = ?, duration = ? WHERE id = ?",
                           (new_time_iso, minutes, tracking_id))
            conn.commit()
            new_time_str = from_utc_to_tz(new_end_time).strftime("%d.%m.%Y %H:%M")
            await message.answer(f"‚úÖ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time_str}.")
            await state.clear()
            user_id = message.from_user.id
            has_active_tracking = check_active_tracking(user_id)
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(has_active_tracking))

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–ø—Ä–∏–º–µ—Ä: 15:45).")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
@dp.message(lambda message: message.text == "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å")
async def show_stats_day(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    daily_stats = get_daily_stats(user_id)
    categories = []
    durations = []

    for row in daily_stats:
        categories.append(remove_emojis(row[0]))
        durations.append(row[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    if not categories or not durations:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(8, 8))
    wedges, texts, autotexts = ax.pie(durations, autopct=lambda pct: autopct_func(pct, durations), startangle=90,
                                      colors=plt.cm.Paired.colors)
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –≤–Ω–∏–∑—É –≥—Ä–∞—Ñ–∏–∫–∞
    ax.legend(wedges, categories, title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", loc="lower center", fontsize=10, bbox_to_anchor=(0.5, -0.3),
              ncol=3)
    # –†–∞–≤–Ω—ã–µ –æ—Å–∏ –¥–ª—è –∫—Ä—É–≥–∞
    ax.axis('equal')
    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –¥–µ–Ω—å')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    try:
        plt.savefig(buf, format='png', bbox_inches='tight')
        buf.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –∫ –Ω–∞—á–∞–ª—É –±—É—Ñ–µ—Ä–∞
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return

    # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ –±—É—Ñ–µ—Ä–∞
    image = BufferedInputFile(buf.getvalue(), filename="daily_stats.png")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram
    try:
        await message.answer_photo(photo=image)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    finally:
        plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –ø–∞–º—è—Ç—å

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    daily_text = "\n".join([f"üìå {cat}: {mins // 60} —á {mins % 60} –º–∏–Ω" for cat, mins in daily_stats]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    text = (f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n{daily_text}")

    await message.answer(text, parse_mode="Markdown")
    has_active_tracking = check_active_tracking(user_id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(has_active_tracking))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")
async def show_stats_week(message: types.Message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    weekly_stats = get_weekly_stats(user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:*\n"
    for weekday, stats in weekly_stats.items():
        day_text = f"\nüìÖ *{weekday}:*\n" + "\n".join(
            [f"üìå {cat}: {mins // 60} —á {mins % 60} –º–∏–Ω" for cat, mins in stats.items()]
        )
        text += day_text
    await message.answer(text, parse_mode="Markdown")
    has_active_tracking = check_active_tracking(user_id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(has_active_tracking))


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
