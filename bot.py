import asyncio
import logging
import os
import io
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv
from datetime import datetime
import sqlite3
import matplotlib.pyplot as plt
import re

conn = sqlite3.connect("database.db")  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ (—Ñ–∞–π–ª database.db)
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã

cursor.execute("""
CREATE TABLE IF NOT EXISTS time_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    date TEXT,
    duration INTEGER  -- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS time_tracking (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    start_time TEXT
)
""")
cursor.execute("""
ALTER TABLE time_logs ADD COLUMN start_time TEXT;
ALTER TABLE time_logs ADD COLUMN end_time TEXT;
""")
conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
TOKEN = os.getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω
if not TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables!")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõÅ –£—Ö–æ–¥ –∑–∞ —Å–æ–±–æ–π"), KeyboardButton(text="üíº –†–∞–±–æ—Ç–∞")],
        [KeyboardButton(text="üèãÔ∏è‚Äç –°–ø–æ—Ä—Ç –∏ –ó–¥–æ—Ä–æ–≤—å–µ"), KeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –¥—Ä—É–∑—å—è")],
        [KeyboardButton(text="üò¥ –°–æ–Ω"), KeyboardButton(text="üè° –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞")],
        [KeyboardButton(text="üìö –õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ"), KeyboardButton(text="üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")],
        [KeyboardButton(text="üêå –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è"), KeyboardButton(text="üöó –õ–æ–≥–∏—Å—Ç–∏–∫–∞")],
    ],
    resize_keyboard=True
)

CATEGORIES = ["üò¥ –°–æ–Ω", "üõÅ –£—Ö–æ–¥ –∑–∞ —Å–æ–±–æ–π", "üíº –†–∞–±–æ—Ç–∞", "üèãÔ∏è‚Äç –°–ø–æ—Ä—Ç –∏ –ó–¥–æ—Ä–æ–≤—å–µ", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –¥—Ä—É–∑—å—è",
              "üöó –õ–æ–≥–∏—Å—Ç–∏–∫–∞", "üè° –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞", "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "üìö –õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", "üêå –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è"]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
DAYS_TRANSLATION = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


def start_tracking(user_id, category):
    now = datetime.now().isoformat()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
    cursor.execute("INSERT INTO time_tracking (user_id, category, start_time) VALUES (?, ?, ?)",
                   (user_id, category, now))
    conn.commit()


def stop_tracking(user_id):
    cursor.execute("SELECT category, start_time FROM time_tracking WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                   (user_id,))
    row = cursor.fetchone()  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å

    if row:
        category, start_time = row
        start_time = datetime.fromisoformat(start_time)
        duration = datetime.now() - start_time
        minutes = round(duration.total_seconds() / 60)

        # **–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**
        date = datetime.now().strftime("%Y-%m-%d")  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        cursor.execute("INSERT INTO time_logs (user_id, category, date, duration) VALUES (?, ?, ?, ?)",
                       (user_id, category, date, minutes))
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ `time_tracking`, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—á–∏—Ç–∞–ª–∞—Å—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π
        cursor.execute("DELETE FROM time_tracking WHERE user_id = ?", (user_id,))
        conn.commit()

        return category, minutes
    return None, None


# —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def get_daily_stats(user_id):
    date = datetime.now().strftime("%Y-%m-%d")

    cursor.execute("""
        SELECT category, SUM(duration) FROM time_logs 
        WHERE user_id = ? AND date = ? 
        GROUP BY category
    """, (user_id, date))

    rows = cursor.fetchall()

    # –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –±–µ–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞
    total_tracked = sum(duration for _, duration in rows)
    untracked_minutes = 1440 - total_tracked  # 1440 –º–∏–Ω—É—Ç = 24 —á–∞—Å–∞

    # –î–æ–±–∞–≤–ª—è–µ–º "–ë–µ–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞"
    rows.append(("üï∞ –ë–µ–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞", untracked_minutes))
    return rows


# —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def get_weekly_stats(user_id):
    cursor.execute("""
        SELECT date, category, SUM(duration) FROM time_logs 
        WHERE user_id = ? AND date >= date('now', '-6 days')
        GROUP BY date, category
        ORDER BY date
    """, (user_id,))

    rows = cursor.fetchall()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    stats_by_day = {}
    for date, category, duration in rows:
        weekday = datetime.strptime(date, "%Y-%m-%d").strftime("%A")
        weekday_ru = DAYS_TRANSLATION[weekday]  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        if weekday_ru not in stats_by_day:
            stats_by_day[weekday_ru] = {}
        stats_by_day[weekday_ru][category] = duration

    # –î–æ–±–∞–≤–ª—è–µ–º "–ë–µ–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞" –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    for weekday in stats_by_day.keys():
        total_tracked = sum(stats_by_day[weekday].values())
        untracked_minutes = 1440 - total_tracked
        stats_by_day[weekday]["üï∞ –ë–µ–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞"] = untracked_minutes

    return stats_by_day


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏.
def remove_emojis(text):
    return re.sub(r'[^\w\s,]', '', text)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –°–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã < 1%
def autopct_func(pct, allvalues):
    if pct < 1:
        return ''
    else:
        return f'{pct:.0f}%'  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.message(lambda message: message.text in CATEGORIES)
async def track_time(message: types.Message):
    user_id = message.from_user.id # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    category = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    old_category, minutes = stop_tracking(user_id)

    if old_category:
        await message.answer(f"‚è≥ –¢—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª {minutes} –º–∏–Ω –Ω–∞ {old_category}.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if old_category != category:
        start_tracking(user_id, category)
        await message.answer(f"‚úÖ –ù–∞—á–∞—Ç —Ç—Ä–µ–∫–∏–Ω–≥: {category}")


# –ú–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ / –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@dp.message(Command("edit_last_tracking"))
async def edit_last_tracking(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        "SELECT id, category, start_time, end_time FROM time_logs WHERE user_id = ? ORDER BY start_time DESC LIMIT 1",
        (user_id,))
    last_tracking = cursor.fetchone()

    if not last_tracking:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    tracking_id, category, start_time, end_time = last_tracking

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ", callback_data=f"edit_start_{tracking_id}_{start_time}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ", callback_data=f"edit_end_{tracking_id}_{end_time}")]
    ])

    await message.answer(
        f"–¢–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫–∏–Ω–≥:\n"
        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"üïí –ù–∞—á–∞–ª–æ: {start_time}\n"
        f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time}\n"
        f"–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=keyboard
    )


# –ö–æ–ª–±—ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
@dp.callback_query(F.data.startswith("edit_start_"))
async def edit_start_time(callback: CallbackQuery):
    tracking_id = callback.data.split("_")[2]
    start_time = callback.data.split("_")[3]
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
    await state.update_data(tracking_id=tracking_id, end_time=start_time)
    await state.set_state("waiting_for_new_start_time")


@dp.callback_query(F.data.startswith("edit_end_"))
async def edit_end_time(callback: CallbackQuery):
    tracking_id = callback.data.split("_")[2]
    end_time = callback.data.split("_")[3]
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
    await state.update_data(tracking_id=tracking_id, end_time=end_time)
    await state.set_state("waiting_for_new_end_time")


# –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
@dp.message(StateFilter("waiting_for_new_start_time"))
async def process_new_start_time(message: types.Message, state: FSMContext):
    try:
        new_start_time = datetime.strptime(message.text, "%H:%M")
        data = await state.get_data()
        tracking_id = data["tracking_id"]
        date = data["start_time"].split()[0]
        new_start_time = date + new_start_time
        cursor.execute("UPDATE time_logs SET start_time = ? WHERE id = ?", (new_start_time, tracking_id))
        conn.commit()

        await message.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_start_time}.")
        await state.clear()

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–ø—Ä–∏–º–µ—Ä: 14:30).")


@dp.message(StateFilter("waiting_for_new_end_time"))
async def process_new_end_time(message: types.Message, state: FSMContext):
    try:
        new_end_time = datetime.strptime(message.text, "%H:%M")
        data = await state.get_data()
        tracking_id = data["tracking_id"]
        date = data["end_time"].split()[0]
        new_end_time = date + new_end_time
        cursor.execute("UPDATE time_logs SET end_time = ? WHERE id = ?", (new_end_time, tracking_id))
        conn.commit()

        await message.answer(f"‚úÖ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_end_time}.")
        await state.clear()

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–ø—Ä–∏–º–µ—Ä: 15:45).")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(Command("stats_day"))
async def send_daily_stats(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    daily_stats = get_daily_stats(user_id)
    categories = []
    durations = []

    for row in daily_stats:
        categories.append(remove_emojis(row[0]))
        durations.append(row[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    if not categories or not durations:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(8, 8))
    wedges, texts, autotexts = ax.pie(durations, autopct=lambda pct: autopct_func(pct, durations), startangle=90, colors=plt.cm.Paired.colors)
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –≤–Ω–∏–∑—É –≥—Ä–∞—Ñ–∏–∫–∞
    ax.legend(wedges, categories, title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", loc="lower center", fontsize=10, bbox_to_anchor=(0.5, -0.3),
              ncol=3)
    # –†–∞–≤–Ω—ã–µ –æ—Å–∏ –¥–ª—è –∫—Ä—É–≥–∞
    ax.axis('equal')
    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –¥–µ–Ω—å')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    try:
        plt.savefig(buf, format='png', bbox_inches='tight')
        buf.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –∫ –Ω–∞—á–∞–ª—É –±—É—Ñ–µ—Ä–∞
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return

    # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ –±—É—Ñ–µ—Ä–∞
    image = BufferedInputFile(buf.getvalue(), filename="daily_stats.png")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram
    try:
        await message.answer_photo(photo=image)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    finally:
        plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –ø–∞–º—è—Ç—å

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    daily_text = "\n".join([f"üìå {cat}: {mins // 60} —á {mins % 60} –º–∏–Ω" for cat, mins in daily_stats]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    text = (f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n{daily_text}")

    await message.answer(text, parse_mode="Markdown")


@dp.message(Command("stats_week"))
async def send_weekly_stats(message: types.Message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    weekly_stats = get_weekly_stats(user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:*\n"
    for weekday, stats in weekly_stats.items():
        day_text = f"\nüìÖ *{weekday}:*\n" + "\n".join(
            [f"üìå {cat}: {mins // 60} —á {mins % 60} –º–∏–Ω" for cat, mins in stats.items()]
        )
        text += day_text
    await message.answer(text, parse_mode="Markdown")


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
